#include "xil_printf.h"
#include "ff.h"
#include "sd_card.h"
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "xil_io.h"
#include "xparameters.h"
#include "xil_types.h"
#include "xil_cache.h"
#include "ff.h"
#include "xdevcfg.h"
#include "picture.h"

#define H_STRIDE            1280
#define H_ACTIVE            1280
#define V_ACTIVE            720
#define VIDEO_LENGTH  (H_STRIDE*V_ACTIVE)

#define VDMA_BASEADDR   XPAR_AXI_VDMA_0_BASEADDR
#define VIDEO_BASEADDR0 0x08000000
#define BUF_SIZE ((H_STRIDE*V_ACTIVE)*3)
#define BYTES_PIXEL        3                          //像素字节数，RGB888占3个字节


void VDMA_init()
{
	/*u32 x=0;
	u32 y=0;
	u32 r,g,b;
	u32 i=0,j=0;
	for(y=0;y<V_ACTIVE;y++)
	{
		for(x=0;x<H_ACTIVE;x++)
		{

			b = gImage_picture[i+2];
			g = gImage_picture[i+1];
			r = gImage_picture[i];
			i+=3;

			Xil_Out32((VIDEO_BASEADDR0+j),((r<<16)|(g<<8)|(b<<0)));
			j+=4;

		}
	}*/
	for(int i = 0; i < VIDEO_LENGTH; i++){
		Xil_Out32((VIDEO_BASEADDR0+i),0);
	}
	//Xil_DCacheFlush();
	Xil_Out32((VDMA_BASEADDR + 0x000), 0x3);//0011
	Xil_Out32((VDMA_BASEADDR + 0x05c), VIDEO_BASEADDR0);
	Xil_Out32((VDMA_BASEADDR + 0x060), VIDEO_BASEADDR0);
	Xil_Out32((VDMA_BASEADDR + 0x064), VIDEO_BASEADDR0);
	Xil_Out32((VDMA_BASEADDR + 0x058), (H_STRIDE*3));
	Xil_Out32((VDMA_BASEADDR + 0x054), (H_ACTIVE*3));
	Xil_Out32((VDMA_BASEADDR + 0x050), V_ACTIVE);
	Xil_DCacheFlush();     //刷新Cache，数据更新至DDR3中
    xil_printf("show color bar\r\n");
}

void colorbar(u8 *frame, u32 width, u32 height, u32 stride)
{
	u32 color_edge;
	u32 x_pos, y_pos;
	u32 y_stride = 0;
	u8 rgb_r, rgb_b, rgb_g;

	color_edge = width * BYTES_PIXEL / 7;
	for (y_pos = 0; y_pos < height; y_pos++) {
		for (x_pos = 0; x_pos < (width * BYTES_PIXEL); x_pos += BYTES_PIXEL) {
			if (x_pos < color_edge) {                                           //红色
				rgb_r = 0x0F;
				rgb_g = 0;
				rgb_b = 0;
			} else if ((x_pos >= color_edge) && (x_pos < color_edge * 2)) {     //橙色
				rgb_r = 0x1F;
				rgb_g = 0x7F;
				rgb_b = 0;
			} else if ((x_pos >= color_edge * 2) && (x_pos < color_edge * 3)) { //黄色
				rgb_r = 0xFF;
				rgb_g = 0x0F;
				rgb_b = 0;
			} else if ((x_pos >= color_edge * 3) && (x_pos < color_edge * 4)) { //绿色
				rgb_r = 0;
				rgb_g = 0xF0;
				rgb_b = 0;
			} else if ((x_pos >= color_edge * 4) && (x_pos < color_edge * 5)) { //青色
				rgb_r = 0;
				rgb_g = 0x0F;
				rgb_b = 0x0F;
			} else if ((x_pos >= color_edge * 5) && (x_pos < color_edge * 6)) { //蓝色
				rgb_r = 0;
				rgb_g = 0;
				rgb_b = 0xFF;
			} else if ((x_pos >= color_edge * 6) && (x_pos < color_edge * 7)) { //紫色
				rgb_r = 0x8B;
				rgb_g = 0;
				rgb_b = 0xFF;
			}
			frame[x_pos + y_stride + 0] = rgb_b;
			frame[x_pos + y_stride + 1] = rgb_g;
			frame[x_pos + y_stride + 2] = rgb_r;
		}
		y_stride += stride;
	}
	Xil_DCacheFlush();     //刷新Cache，数据更新至DDR3中
	xil_printf("show color bar\r\n");
}


int main()
{

		VDMA_init();
/*		u8 *mem_addr = VIDEO_BASEADDR0;
			u8 R[3]={0xFF,0x00,0x00};
			u8 G[3]={0x00,0xFF,0x00};
			u8 B[3]={0x00,0x00,0xFF};
			for (int row=0;row < V_ACTIVE;row ++)
			{
				for(int col=0;col<H_ACTIVE;col++)
				{
					if(row<240) memcpy(mem_addr,R,3);
					else if(row<480) memcpy(mem_addr,G,3);
					else memcpy(mem_addr,B,3);

					mem_addr+=3;
				}
			}
			Xil_DCacheFlush();*/
		colorbar(VIDEO_BASEADDR0,V_ACTIVE , H_ACTIVE , BYTES_PIXEL);

			return 0;
}
